import { RelationalConnector, ITable, ITableRelation, IInternalEnumInfo, IEnum } from '../relationalConnector';
import { Client } from 'pg';
import { DatabaseType } from 'prisma-datamodel';
import { RelationalIntrospectionResult } from '../relationalIntrospectionResult';
import IDatabaseClient from '../../IDatabaseClient';
export declare class PostgresConnector extends RelationalConnector {
    constructor(client: IDatabaseClient | Client);
    getDatabaseType(): DatabaseType;
    protected createIntrospectionResult(models: ITable[], relations: ITableRelation[], enums: IEnum[]): RelationalIntrospectionResult;
    listSchemas(): Promise<string[]>;
    protected getTypeColumnName(): string;
    protected parameter(count: number, type: string): string;
    protected queryColumnComment(schemaName: string, tableName: string, columnName: string): Promise<string | null>;
    protected queryIndices(schemaName: string, tableName: string): Promise<{
        tableName: string;
        name: string;
        fields: string[];
        unique: boolean;
        isPrimaryKey: boolean;
    }[]>;
    private parseJoinedArray;
    protected queryEnums(schemaName: string): Promise<IInternalEnumInfo[]>;
}
