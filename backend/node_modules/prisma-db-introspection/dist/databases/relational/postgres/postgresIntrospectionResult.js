"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var relationalIntrospectionResult_1 = require("../relationalIntrospectionResult");
var prisma_datamodel_1 = require("prisma-datamodel");
var PostgresIntrospectionResult = /** @class */ (function (_super) {
    __extends(PostgresIntrospectionResult, _super);
    function PostgresIntrospectionResult(model, relations, enums, renderer) {
        return _super.call(this, model, relations, enums, prisma_datamodel_1.DatabaseType.postgres, renderer) || this;
    }
    PostgresIntrospectionResult.prototype.isTypeReserved = function (type) {
        return type.name == '_RelayId';
    };
    PostgresIntrospectionResult.prototype.toTypeIdentifyer = function (fieldTypeName, fieldInfo, typeName) {
        switch (fieldTypeName) {
            case 'int1':
            case 'int2':
            case 'int4':
            case '_int4':
            case 'int8':
                return prisma_datamodel_1.TypeIdentifiers.integer;
            case 'numeric':
            case 'float4':
            case 'float8':
                return prisma_datamodel_1.TypeIdentifiers.float;
            case 'varchar':
            case 'bpchar':
            case '_text':
            // If we have a text type on an ID field, we map to the ID type.
            case 'text':
                return fieldInfo.isId ? prisma_datamodel_1.TypeIdentifiers.id : prisma_datamodel_1.TypeIdentifiers.string;
            case 'bool':
                return prisma_datamodel_1.TypeIdentifiers.boolean;
            case 'jsonb':
            case 'json':
                return prisma_datamodel_1.TypeIdentifiers.json;
            case '_date':
            case 'date':
            case 'timestamptz':
            case 'timestamp':
                return prisma_datamodel_1.TypeIdentifiers.dateTime;
            case 'uuid':
                return prisma_datamodel_1.TypeIdentifiers.uuid;
            default:
                return null;
        }
    };
    PostgresIntrospectionResult.prototype.parseDefaultValue = function (defaultValueString, type) {
        var val = defaultValueString;
        // Detect string
        if (val.startsWith("'")) {
            // Strip quotes (are added again by renderer)
            val = val.substring(1, val.length - 1);
        }
        // Remove cast operator
        var i = val.indexOf('::');
        if (i >= 0) {
            val = val.substring(0, i);
        }
        // Check for null
        if (val.toUpperCase() === 'NULL') {
            return null;
        }
        // If the field is not a string field,
        // and the default val is not a boolean or a number, we assume a function call or sequence reference.
        if (type !== prisma_datamodel_1.TypeIdentifiers.string && type != prisma_datamodel_1.TypeIdentifiers.id) {
            if (isNaN(val) &&
                val.toLowerCase() !== 'true' &&
                val.toLowerCase() !== 'false') {
                return null;
            }
        }
        // TODO: Sequences are simply ignored.
        return val;
    };
    return PostgresIntrospectionResult;
}(relationalIntrospectionResult_1.RelationalIntrospectionResult));
exports.PostgresIntrospectionResult = PostgresIntrospectionResult;
//# sourceMappingURL=postgresIntrospectionResult.js.map