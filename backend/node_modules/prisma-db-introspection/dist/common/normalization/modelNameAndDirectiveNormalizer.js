"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var prisma_datamodel_1 = require("prisma-datamodel");
var modelNameNormalizer_1 = require("./modelNameNormalizer");
var ModelNameAndDirectiveNormalizer = /** @class */ (function (_super) {
    __extends(ModelNameAndDirectiveNormalizer, _super);
    function ModelNameAndDirectiveNormalizer(baseModel) {
        var _this = _super.call(this) || this;
        _this.baseModel = baseModel;
        _this.baseType = null;
        return _this;
    }
    // https://github.com/prisma/prisma/issues/3725
    ModelNameAndDirectiveNormalizer.prototype.normalize = function (model) {
        _super.prototype.normalize.call(this, model);
    };
    ModelNameAndDirectiveNormalizer.prototype.findBaseByName = function (baseObjs, obj) {
        var _a = __read(baseObjs.filter(function (base) {
            if (base.databaseName) {
                return base.databaseName === obj.name;
            }
            else {
                return base.name === obj.name;
            }
        }), 1), baseCandidate = _a[0];
        return baseCandidate || null;
    };
    ModelNameAndDirectiveNormalizer.prototype.findBaseByRelation = function (baseObjs, obj) {
        if (typeof obj.type === 'string') {
            return null;
        }
        var fieldType = obj.type;
        var _a = __read(baseObjs.filter(function (base) {
            return (typeof base.type !== 'string' &&
                base.type.name === fieldType.name &&
                base.relationName === obj.relationName);
        }), 1), baseCandidate = _a[0];
        return baseCandidate || null;
    };
    ModelNameAndDirectiveNormalizer.prototype.findBaseById = function (baseObjs, obj) {
        var _a = __read(baseObjs.filter(function (baseObj) { return baseObj.isId && obj.isId; }), 1), baseCandidate = _a[0];
        return baseCandidate || null;
    };
    ModelNameAndDirectiveNormalizer.prototype.assignProperties = function (baseObj, obj) {
        if (baseObj.databaseName) {
            obj.name = baseObj.name;
            obj.databaseName = baseObj.databaseName;
        }
    };
    ModelNameAndDirectiveNormalizer.prototype.assignTypeProperties = function (baseObj, obj) {
        if (baseObj === null) {
            return;
        }
        this.assignProperties(baseObj, obj);
    };
    ModelNameAndDirectiveNormalizer.prototype.assignFieldProperties = function (baseObj, obj, parentModel) {
        if (baseObj === null) {
            return;
        }
        this.assignProperties(baseObj, obj);
        obj.isId = obj.isId || baseObj.isId;
        obj.isCreatedAt = obj.isCreatedAt || baseObj.isCreatedAt;
        obj.isUpdatedAt = obj.isUpdatedAt || baseObj.isUpdatedAt;
        obj.defaultValue = obj.defaultValue || baseObj.defaultValue;
        // We found an enum type field shadowed by prisma.
        if (obj.type === prisma_datamodel_1.TypeIdentifiers.string &&
            typeof baseObj.type !== 'string' &&
            baseObj.type.isEnum) {
            var baseEnumType_1 = baseObj.type;
            // Attempt to find the enum type
            var candidateEnum = parentModel.types.find(function (x) { return x.isEnum && x.name === baseEnumType_1.name; });
            if (candidateEnum !== undefined) {
                obj.type = candidateEnum;
            }
        }
    };
    ModelNameAndDirectiveNormalizer.prototype.normalizeType = function (type, parentModel) {
        if (this.baseModel === null) {
            this.baseType === null;
        }
        else {
            this.baseType = this.findBaseByName(this.baseModel.types, type);
        }
        this.assignTypeProperties(this.baseType, type);
        _super.prototype.normalizeType.call(this, type, parentModel, this.baseType !== null);
    };
    ModelNameAndDirectiveNormalizer.prototype.normalizeField = function (field, parentType, parentModel) {
        var baseField = null;
        if (this.baseType !== null) {
            baseField = this.findBaseByName(this.baseType.fields, field);
            if (baseField !== null) {
                this.assignName(field, baseField.name);
                this.assignFieldProperties(baseField, field, parentModel);
            }
            else {
                // Fallback to ID.
                baseField = this.findBaseById(this.baseType.fields, field);
                if (baseField !== null) {
                    this.assignFieldProperties(baseField, field, parentModel);
                }
                else {
                    // Fallback to relation.
                    baseField = this.findBaseByRelation(this.baseType.fields, field);
                    if (baseField !== null) {
                        // Hard-override name.
                        field.name = baseField.name;
                        field.databaseName = baseField.databaseName;
                        this.assignFieldProperties(baseField, field, parentModel);
                    }
                }
            }
            if (baseField !== null) {
                this.assignName(field, baseField.name);
                this.assignFieldProperties(baseField, field, parentModel);
            }
        }
        _super.prototype.normalizeField.call(this, field, parentType, parentModel);
    };
    return ModelNameAndDirectiveNormalizer;
}(modelNameNormalizer_1.default));
exports.default = ModelNameAndDirectiveNormalizer;
//# sourceMappingURL=modelNameAndDirectiveNormalizer.js.map